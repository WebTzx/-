#### # 1. 关于数组去重
- 利用扩展运算符new 和Set()创建一个新的set类型的对象，利用set类型的对象中元素唯一性来排除重复的数组成员，具体做法如下：
       
    ```
    let  arr = [...new Set([1,2,3,4,1,3,'a','a'])];
    // [1, 2, 3, 4, "a"]
    ```
- 利用对象的key值的唯一性，对象也有类似Set的特性， 比方说在对象中重复定义一个属性， 定义在前的属性会被最后定义的覆盖，我们也可以利用这个特性来完成数组的去重，例如：

    ```
    let arr = [1,2,3,4,1,3,'a','a'];
    let obj = {};
    arr.forEach(it => obj[it] = it);
    Object.keys(obj)
    // ["1", "2", "3", "4", "a"]
    // 输出结果会全部字符串形式输出
    ```
- 遍历数组: 
    
    ```
    function EliminateRepeat(arr) { 
        let n = [];
        for(let i = 0; i < arr.length; i++) {
            if(!n.includes(arr[i])) n.push(arr[i])
        }
        return n;
    }
    ```
- 对象键值对法：
        
    ```
    function EliminateRepeat1(arr) {
        let n = [];
        let box = {};
        for (let j = 0; j < arr.length; j++) {
            if (!box[arr[j]]) {
                n.push(arr[j]);
                box[arr[j]] = 1;
            }
        }
        return n;
    }
    ```
- 利用下标判断

    ```
    function EliminateRepeat2(arr) {
        var n = []; 
        for (let k = 0; k < arr.length; k++) {
            if (arr.indexOf(arr[k]) === k) {
                n.push(arr[k]);
            }
        }
        return n;
    }
    ```
- 相邻去重

    ```
    function EliminateRepeat3(array){ 
    array.sort(); 
    var re=[array[0]]; 
    for(var i = 1; i < array.length; i++){ 
    if( array[i] !== re[re.length-1]){ 
      re.push(array[i]); 
     } 
     } 
     return re; 
    } 
    ```
-获取没重复的

    ```
    / 思路：获取没重复的最右一值放入新数组 
    function EliminateRepeat4(array){ 
    var r = []; 
    for(var i = 0, l = array.length; i < l; i++) { 
     for(var j = i + 1; j < l; j++) 
      if (array[i] === array[j]) j = ++i; 
     r.push(array[i]); 
     } 
     return r; 
    }
    ```
- 利用filter方法

    ```
    function EliminateRepeat5(arr) {
        arr[0] = 'new'; // 和去重无关，直接忽略
        arr = arr.filter((it, i) => arr.indexOf(it) === i);
        return arr;
    }
    ```


#### 延伸知识：
- Set构造函数，接受一个可叠待客迭代对象作为参数， 若参数为空或为null，则返回一个空的set对象，值得注意的是，在set中元素是唯一的，并且null、undefined都可以被储存，NaN之间被视为相同的值，也会符合元素唯一的特性
- 属性：
    construct指向Set
    size返回对象的长度
<!--- 方法：-->
    <!---   Set.prototype.add: 添加到对象的最后-->
    <!---   Set.prototype.delete: 删除和参数相等的成员-->
    <!---   Set.prototype.clear: 清空set对象-->
    <!---   Set.prototype.entries：返回一个迭代器对象-->
    <!---   Set.prototype.forEach-->
    <!---   Set.prototype.has(value)返回一个布尔值，表示该值在Set中存在与否。-->
    <!---   Set.prototype.keys()与values()方法相同，返回一个新的迭代器对象，该对象包含Set对象中的按插入顺序排列的所有元素的值。-->
    <!---   Set.prototype.values()返回一个新的迭代器对象，该对象包含Set对象中的按插入顺序排列的所有元素的值。-->
- 在上面的filter方法去重的例子中，我们把arr参数重置，并return，按照函数参数是按值传递的常识，我们在函数内对arr的修改和重新赋值并不会影响到外部的变量，但是让我们尝试修改一下arr的第一项，发现外部的arr被改变了，难道函数参数不是按值传递的，是按引用传递的吗？ 显然并不是这样，因为我们队arr的重新赋值，并没有影响到外部的变量，其实函数的参数是按值传递的， 只不过在引用类型的参数传递时，传递的只是参数的引用，所以在我们修改引用类型的参数时， 会影响外部的变量， 但我们对参数重新赋值的时候，他就断开了对外部的变量引用，相当于一个新的值，当函数运行完毕后该值被回收机制回收over
